#+TITLE : Prise de notes TD 4I400 PSCR
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: inlineimages

Yann Thierry-Mieg (yann.thierry-mieg@lip6.fr)
4I400

* TD 1 : 27/09/2019

** 1.1 Rappels chaîne du C, const

*** Question 1

#+BEGIN_SRC c++
  unsigned int length(const char *string);
  char *newcopy(const char *string);
#+END_SRC

*** Question 2

Pour faire ça proprement, on créé un fichier strutil.h (fichier d'en-tête), dans lequel on met les signatures, et un autre fichier pr.c, dans lequel on mettra l'implémentation.

#+BEGIN_SRC c++ :tangle ./TDTME1/TD1/strutil.h
  // Dans un fichier d'en tête (en .h)

  #pragma once
  #include <cstring>

  namespace pscr {

	  size_t length(const char *string);
	  char *newcopy(const char *string);
  }
#+END_SRC

On peut aussi se débrouiller avec ifndef, define, endif, à la C.

*** Questions 3 et 4 et 5

La vraie manière, à la Linus :

#+BEGIN_SRC c++ :tangle ./TDTME1/TD1/strutil.cpp
  // Dans un fichier source, .cpp

  #include "strutil.h"
  #include <cstring>
  #include <cstdlib>

  namespace pscr {

	  size_t length(const char *string)
	  {
		  size_t size = 0;

		  for ( ; *string; string++, size++);

		  return size;
	  }

	  char *newcopy(const char *string)
	  {
		  size_t n = length(string);
		  char *ptr = new char[n+1];

		  while (*string) {
			  ,*ptr++ = *string++;
		  }

		  ,*ptr = '\0';

		  return ptr - n;
	  }

  }
#+END_SRC

*** Question 6

#+BEGIN_SRC c++
  #include <cstring>

  char *newcopy(const char *string)
  {
	  size_t n = length(string);
	  char *ptr = new char[n+1] ;

	  memcpy(ptr, string, n + 1);

	  return ptr;
  }
#+END_SRC

*** Question 7

#+BEGIN_SRC c++ :tangle ./TDTME1/TD1/exo1.cpp
  #include "strutil.h"
  #include <iostream>
  #include <cstdio>

  #include <cstdlib>

  using namespace pscr;
  using namespace std;

  int main()
  {
	  const char *str = "Hello World !";
	  char *copy = newcopy(str);

	  printf("%p %s %lu\n", str, str, length(str));
	  printf("%p %s %lu\n", copy, copy, length(copy));

	  delete[] copy;

	  return 0;
  }
#+END_SRC

Remarque :

C++ est scandaleux : str est imprimé comme un string, et pas comme une adresse.
Pour faire ce qu'on a fait avec printf, on doit écrire :

#+BEGIN_SRC c++
  cout << (void *)str << " " << str << " " << length(str) << endl;
  cout << (void *)copy << " " << copy << " " << length(copy) << endl;
#+END_SRC

Alors qu'on penserait, à raison :

#+BEGIN_SRC c++
  cout << str << " " << *str << " " << length(str) << endl;
  cout << copy << " " << *copy << " " << length(copy) << endl;
#+END_SRC

En fait cout voit que str pointe sur un caractère et voit le caractère '\0'. Il interprète ça comme une string.

On n'arrive pas à forcer une erreur de segmentation, malgré un débordement de tampon forcé ? (Ni en C avec malloc, ni en C++ avec new)


*** Question 8

Pour compiler toute cette saloperie :

#+BEGIN_SRC shell
  g++ -std=c++1y -O0 -g3 -Wall -c -o "/chemin/vers/strutil.o" /chemin/vers/strutil.cpp

  g++ -std=c++1y -O0 -g3 -Wall -c -o "/chemin/vers/exo1.o" /chemin/vers/exo1.cpp

  g++ -o /chemin/vers/exo1 /chemin/vers/strutil.o /chemin/vers/exo1.o

  /chemin/vers/exo1 # pour lancer le programme

  valgrind --leak-check=full --track-origins=yes /chemin/vers/exo1 # pour vérifier les fuites de mémoire
#+END_SRC

On s'est permis de faire un Makefile.

** Une classe String

*** Question 9 et 10 : opérateur

#+BEGIN_SRC c++ :tangle ./TDTME1/TD1/string.h
  #pragma once

  #include <cstring>
  #include <iostream>

  namespace pscr {

	  class String {
		  friend std::ostream & operator<< (ostream &os, const pscr::String &str);
		  const char *str;
	  public:
		  String(const char* ori);
		  size_t length() const;
	  };

	  std::ostream & operator<< (ostream &os, const pscr::String &str);
  }
#+END_SRC

#+BEGIN_SRC c++ :tangle ./TDTME1/TD1/string.cpp
  #include "string.h"
  #include "strutil.h"
  #include <iostream>

  using namespace std;

  namespace pscr {

	  String::String(const char *ori):str(ori)
	  {}

	  size_t String::length() const
	  {
		  return pscr::length(str);
	  }

	  ostream & operator<< (ostream &os, const pscr::String &s)
	  {
		  return os << s.str;
	  }
  }
#+END_SRC

*** Question 11

abc pointe vers un endroit de la mémoire où il n'y a plus rien de légal.



* TD 2 : 04/10/2019

** 1.1 Copie et affectation

#+BEGIN_SRC c++
  #pragma once
  #include <cstddef> // size_t
  #include "strutil.h"

  namespace pr {
	  class String {
		  const char * str;
	  public:
		  String(const char *cstr=""): str(newcopy(cstr)){};
		  virtual ~String() { delete [] str;}
		  size_t length() const { return pr::length(str);};
	  };
  } // fin namespace pr
#+END_SRC

*** Question 1

Le problème, c'est que vu que l'appel String ne se résout pas vers une fonction définie par l'utilisateur : elle résout vers une version par défaut du compilateur.

La version par défaut du compilateur construit par copie.

Elle copie donc la référence str, aliasant la chaîne déjà dans le tas.

Quand je sors du scope avec les crochets, le stack frame du pointeur est dépilé, et donc le destructeur est appelé par défaut.

Donc le contenu du tas pointé par abc et def et désalloué.

Quand je fais référence au même octet avec abc , j'ai :

Undefined behaviour. On a pas forcément toujours segfault.


Deuxième problème.

= va se résoudre sur la version par défaut de l'opérateur =.
Va juste copier la référence (pointeur) str, on va avoir le même problème en pire.

Sauf que l'autre chaîne du tas n'aura plus de référence, et donc on a une fuite.

Si la classe contient un pointeur, il va falloir redéfinir le constructeur, le destructeur, l'opérateur = et la copie.

*** Question 2

En se servant des primitives de la semaine dernière :


#+BEGIN_SRC c++
  #pragma once
  #include <cstddef> // size_t
  #include "strutil.h"

  namespace pr {
	  class String {
		  const char * str;
	  public:
		  // Cteur avec constante
		  String(const char *cstr=""): str(newcopy(cstr)){};
		  // Dteur
		  virtual ~String() { delete [] str;}
		  // Taille
		  size_t length() const { return pr::length(str);};

		  // Cteur par copie
		  String(const String &other) {
			  str = newcopy(other.str);
		  }

		  // Opérateur =
		  String & operator= (const String &other) {
			  if (&other != this) {
				  delete[] this->str;
				  str = newcopy(other.str);
			  }
		  }
	  };
  } // fin namespace pr

#+END_SRC

Dans tous les cas où on a des pointeurs dans les classes, il faut absolument définir ces choses-là.

** 1.2 Vecteur : Stockage contigü

*** Question 3

Implémentons nous-même la classe Vector.
On a de la généricité (on peut définir des Vector de int ou float, ou autre chose)

Quand on a une classe générique, on écrit le code dans le .h (en effet, on a besoin )

#+BEGIN_SRC c++
  // Vector.h ou un truc du genre

  #pragma once
  #include <cstddef> // size_t

  namespace pr {
	  template <typename T>

	  class Vector {
	  private:
		  T *tab;
		  size_t alloc_sz;
		  size_t size;
	  public:
		  Vector(size_t asize=10) {
			  size = 0;
			  alloc_sz = asize;
			  tab = new T[alloc_sz];
		  }

		  ~Vector() {
			  delete[] tab;
		  }
		  // On devrait ici avoir un cteur par copie
		  // Un opérateur =

		  T& operator[](size_t index) {
			  return tab[index];
		  }

		  const T& operator[](size_t index) const {
			  return tab[index];
		  }

		  void push_back(const t& obj) {
			  ensureCapacity(size + 1);
			  tab[size++] = obj;
		  }

		  int ensureCapacity(size_t n) {
			  if (n >= alloc_sz) {
				  T *tmp = new T[alloc_sz * 2];

				  for (int i = 0; i < size; ++i) {
					  tmp[i] = tab[i];
				  }

				  delete []tab;

				  tab = tmp;
				  return alloc_sz * 2;
			  }

			  return alloc_sz;
		  }
	  };
  }
#+END_SRC

En fait la référence, c'est un pointeur toujours déréférencé.

On doit dédoubler l'opérateur [], parce que probablement quelque part, quelqu'un a écrit un opérateur qui prend une référence const. Si j'essaie de me servir de cet opérateur, je ne peux pas compiler. Le const, c'est la chienlit.

Le const après la déclaration d'une méthode porte sur le premier paramètre implicite de la méthode, le this.

Pourquoi alloc_sz * 2 ? La réponse en cours d'ALGAV.

** 1.3 Liste chaînée

*** Question 4

#+BEGIN_SRC c++
  // list.h ou un truc du genre

  #pragma once
  #include <cstddef> // size_t

  namespace pr {
	  template <typename T>

	  class list {
		  struct Chainon {
			  T data;
			  Chainon *next;
			  Chainon(const T& data, Chainon *next) : data(data),next(next) {}
		  };

		  Chainon *tete;
	  public:
		  list() {
			  tete = nullptr;
		  }

		  void push_front(const T& data) {
			  tete = new Chainon(data,tete);
		  }

		  T& operator[] (size_t index) {
			  Chainon *cur = tete;

			  for (int i = 0; i < index; ++i) {
				  cur = cur->next;
			  }

			  return cur->data;
		  }

		  const T& operator[] (size_t index) const {
			  Chainon *cur = tete;

			  for (int i = 0; i < index; ++i) {
				  cur = cur->next;
			  }

			  return cur->data;
		  }



	  };

  }
#+END_SRC

** 1.4 Table de hachage

*** Question 5 et 6

La meilleure manière d'accéder au nombre d'éléments stockés dans la table (size), c'est d'enregistrer cette valeur au fur et à mesure qu'on rajoute des valeurs.

Le calcul de la taille requiert d'itérer sur tous les éléments du vecteur, puis sur tous les éléments de la liste chaînée : obtenir la taille d'une liste chaînée simple est une opération non-triviale, de complexité au pire cas O(n).

On se permet donc de créer un champ dans privé qui contient la taille, initialisé dans les constructeurs (pour permettre la bonne valeur d'être mise lors d'une construction par copie).

On donne ici notre implémentation complète de la table de hachage, qui se sert autant qu'il est possible des fonctions de la bibliothèque standard (plutôt que nos implémentations).

#+BEGIN_SRC c++ :tangle ./TDTME2/TD2/hash.cpp
  #include <iostream>
  #include <fstream>
  #include <regex>
  #include <chrono>

  #include <vector>
  #include <utility>
  #include <forward_list>

  using namespace std;

  template <typename K, typename V>
  class HashMap {

	  struct Entry {
		  const K key;
		  V value;
		  Entry(const K& key, const V& value) : key(key), value(value) {}
	  };
	  std::vector <std::forward_list<Entry>> buckets;
	  size_t nb_stored_values;

  public:

	  HashMap(size_t size) {
		  buckets.resize(size);
		  nb_stored_values = 0;
	  }

	  HashMap() {
		  buckets.resize(256);
		  nb_stored_values = 0;
	  }

	  V* get(const K& key) {
		  size_t h = std::hash <K>()(key);
		  h = h % buckets.size();

		  for (Entry& ent : buckets[h]) {
			  if (ent.key == key) {
				  return &ent.value;
			  }
		  }

		  return nullptr;
	  }

	  bool put(const K& key, const V& value) {
		  size_t h = std::hash <K>()(key);
		  h = h % buckets.size();

		  for (Entry& ent : buckets[h]) {
			  if (ent.key == key) {
				  ent.value = value;
				  return true;
			  }
		  }

		  buckets[h].push_front(Entry(key, value));
		  this->nb_stored_values++;
		  return false;
	  }

	  bool del(const K& key) {
		  size_t h = std::hash <K>()(key);
		  h = h % buckets.size();

		  auto prev = buckets[h].before_begin();
		  for (auto it = buckets[h].before_begin();
		       it != buckets[h].end();) {
			  prev = it;
			  if ((++it)->key == key) {
				  buckets[h].erase_after(prev);
				  nb_stored_values--;
				  return true;
			  }
		  }
		  return false;
	  }

	  size_t nb_buckets() const {
		  return buckets.size();
	  }

	  size_t size() const {
		  return nb_stored_values;
	  }

	  void grow() {
		  size_t former_size = buckets.size();

		  HashMap nouvelle_map(2 * former_size);

		  K temp_key;
		  V temp_value;
		  size_t temp_nb_values = 0;

		  for (int i = 0; i < former_size ; i++) {
			  while (buckets[i].empty() != 1) {
				  temp_key = buckets[i].front().key;
				  temp_value = buckets[i].front().value;
				  buckets[i].pop_front();
				  nb_stored_values--;
				  nouvelle_map.put(temp_key, temp_value);
				  temp_nb_values++;
			  }
		  }

		  buckets.swap(nouvelle_map.buckets);
		  this->nb_stored_values = temp_nb_values;
		  nouvelle_map.buckets.clear();
	  }

  };

  int main()
  {
	  HashMap<int,int> test;

	  test.put(1,15);
	  cout << *(test.get(1)) << endl;
	  cout << test.nb_buckets() << endl;
	  cout << test.size() << endl;
	  test.grow();
	  cout << test.nb_buckets() << endl;
	  cout << test.size() << endl;
	  cout << *(test.get(1)) << endl;
	  test.put(2,16);
	  cout << test.size() << endl;
	  return 0;
  }
#+END_SRC




* Annexes

Les supports de TD :

[[./TDTME1/tdtme1.pdf][TD 1]]

