#+TITLE : Prise de notes CM 4I400 PSCR
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: inlineimages

Yann Thierry-Mieg (yann.thierry-mieg@lip6.fr)
4I400

* Informations pratiques

** Références

Des références de C++, des références de concurrence, des rappels de C.


* Cours 1 : 16/09/2019

** C et C++ (et Java)

C++ presque sur-ensemble du C98

On retrouve les :

- types de données (variantes non signées)
- struct, tableaux, pointeurs
- partage mémoire entre le tas et la pile

En plus :

- Objet, classes, instances
- Namespace (fonctions rangées dans des paquets)
- Typage nouveau : référence
- Annotation const
- Polymorphisme


Par rapport à Java :

- Mêmes notions de classe, surcharge, héritage, même genre de syntaxe.
- On gère la mémoire nous-même
- Généricité un peu moins propre. Implanté dans le compilateur par une succession de macros. (en Java, erasetype)
- Accès à la mémoire et au noyau (pas de VM), beaucoup plus performant.
- En contrepartie, on a la réflexion, introspection, dynamicité

On écrit les bibliothèques en C++, et on assemble avec Python (3 !).

** Du C au C++ : un exemple

On reprend la structure d'un programme C propre, avec déclaration et implémentation séparée, puis un main séparé.

#pragma once
Défense contre les doubles déclarations.

*** Préprocesseur

PréProcesseur se contente de résoudre les include pour faire un gros fichier.

*** Compilation :

Chaque fichier (non en-tête) source est compilé séparément.
Petite vérifications syntaxique (déclaration et typage, grossièrement).

Le .o qui sort est le code assembleur (agglomération d'une série de fonction).

*** Edition de liens :

On va chercher dans le main.o les références externes, on va chercher le référencé dans le point.o, on inclut.

On peut lier de deux manière :
- statique (On recopie les fonctions), complet, pas de dépendances runtime
- dynamique (seulement pour la lib standard ?, on laisse la référence), incomplet, il faut que la lib soit là, sinon ça marche pas : il reste des dépendances runtime.

*** Constituer une bibliothèque

On compile 

ar(1) se contente de mettre des .o bout à bout.
.a lib statique

g++ -shared
.so (.dll sous Windows) lib dynamique

g++ -l<lib> <main> : liaison dynamique
g++ <lib> <main> : liaison statique

ldd(1) donne la liste des lib dépendances runtime d'un exécutable.

*** Le binaire et le processus

Le processus a une plage d'adresse (virtuelles) de 0 jusqu'à la taille du pointeur (2^64) : la mémoire vue par le processus (beaucoup plus que la vraie mémoire, on se doute).

L'OS doit traduire la mémoire virtuelle en adresse mémoire physique.

Le binaire va dans le segment de code de l'espace d'adressage du processus.
Segment stack
Main tout en bas.

Les adresses en dessous sont illégitimes sauf si elles ont été réservées explicitement (malloc ou new) : sinon, segfault.

On a aussi une liste des descripteurs de fichier et des entrées et sorties standard.

*** Rappel sur C et le passage des paramètres par copie

Ne pas se faire avoir si on veut que les fonctions fassent vraiment quelque chose en dehors de leur stack frame.

*** C++, innovations

Struct et class, c'est presque la même chose en C++.
Struct tous les champs sont publics par défaut, class sont tous privés par défaut.

Constructeur, porte le même nom que la classe.
L'autre méthode n'a pas besoin de paramètres, c'est le contexte courant (on y accèdera par 'this').

Chaque class ou struct définit implicitement un namespace homonyme.

Pointeur particulier "this" vers l'objet courant.
(Donc en fait chaque fonction admet un paramètre implicite, le pointeur vers l'objet courant)

polymorphisme : opération valable sur plusieurs types, capable de reconnaître un type et d'agir en conséquence.

** Les bases du C++

Idée que les opérateurs peuvent être redéfinis.

#+BEGIN_SRC c++
  #include <iostream>

  int main()
  {
	  std::cout << "Hello, World !" << std::endl;
	  return 0;
  }
#+END_SRC

Ici les opérateurs << et >> sont redéfinissables. Ce sont des flux, connectables sur plein d'autres choses que les entrées et sorties standard.

char * est interprété par cet opérateur comme un string.

*** Les types

Beaucoup trop.

Un type booléen (assez inutile)
Le nullptr, comme le NULL de C. (comparaisons avec d'autres types autorisés, contrairement à NULL).

*** Les opérateurs

Beaucoup beaucoup trop.

Ne pas hésiter à mettre beaucoup de parenthèses.

Certains opérateurs peuvent être redéfinis. (liste complète dans le support).

[C'est vraiment un langage de connard. On n'a vraiment pas envie de se poser des questions, ni d'être rigoureux.]

*** Mots-clés

const

const dans les paramètres : pas de modification dans le corps de la fonction (juste pour déboguage, pas utilisable en soi, passage par copie)

const avec un pointeur ou une référence dans les paramètres permet de cumuler la sécurité du passage par valeur et la vitesse du passage par référence

Passage par référence :

#+BEGIN_SRC c++
  void nique(int& i)
  {
	  int a = 30;
	  i = a;
  }

  int main()
  {
	  int x = 100;
	  std::cout << x << std::endl;
	  nique(x);
	  std::cout << x << std::endl;
	  return 0;
  }
#+END_SRC

Différence avec le pointeur (on ne déréférence pas avec *), et la référence ne peut pas être nulle.

On ne peut pas passer un littéral par référence : en effet, leur adresse est dans une zone de la mémoire protégée en écriture.

On peut retourner une référence en retour de fonction.

La référence doit toujours être initialisée, on peut l'assimiler à un pointeur constant.

"Const, c'est comme la GPL, c'est contaminant"


* Cours 2 : 23/09/2019

** Classe, instance, allocation

** Surcharge, polymorphisme, résolution

#+BEGIN_DEFINITION
Surcharge

Deux fonctions qui font la même chose sur des types d'objets différents, peuvent se voir donner le même nom.
A la compilation va chercher la fonction dont la signature correspond.

Le compilateur essaie de trouver la signature qui correspond le plus. Il peut y avoir des conversions implicites.

Pas exactement comme un cast. Il y a une conversion, pas juste une réinterprétation.

On ne peut pas distinguer des fonctions par leur valeur de retour : on peut avoir const et non-const, ce qui change la signature.
#+END_DEFINITION

On peut définir des valeurs par défaut pour les arguments :

#+BEGIN_SRC c++
  void f(int i , char c = 'a', int n = 10);
#+END_SRC

Tous les appels suivants sont valides :

#+BEGIN_SRC c++
  f(1, 'c', 2);
  f(2, 'z'); // Correspond à f(2, 'z', 10)
  f(2); // Correspond à f(2, 'a', 10)
#+END_SRC

Les méthodes d'une classe peuvent être surchargées.


Le but est de faire en sorte que tous les objets soient initialisés. De préférence une seule fois.

#+BEGIN_DEFINITION
Un constructeur est une méthode spéciale d'une classe :

- Porte le même nom que la classe
- Ne renvoie pas de résultats
- Peut prendre des paramètres
- Peut être surchargée
- Ne peut pas être invoquée explicitement
- Implicitement et automatiquement invoquée lors de la déclaration dans la pile ou allocation dynamique dans le tas.
#+END_DEFINITION

*** new

Il faut distinguer l'espace d'adressage virtuel et la mémoire physique.

Le principe de new (et de malloc aussi, en fait), c'est de réserver une zone de l'espace d'adressage et de créer une correspondance avec la mémoire physique.

*** Initialisation

Une variable ou une méthode statique instanciée n'est pas logée dans la section de pile correspondant à la méthode, mais dans la section de code de l'espace d'adressage.

*** Opérateurs

On peut redéfinir les opérateurs pour une classe bien précise.

Le but d'un opérateur est de fournir une notation plus conventionnelle et lisible que les notations fonctionnelles pointées.

Donc on peut surcharger un opérateur :
- Par une fonction. Au moins une opérande doit être de type classe
- Par une méthode d'une classe : La première opérande est l'objet pour laquelle la méthode est invoquée.

*** Destructeurs

Chaque fois qu'une instance est supprimée, seul ce qui a été mis dans la pile est supprimé automatiquement. Ce qui a été alloué dynamiquement doit être enlevé manuellement.

*** Forme canonique d'une classe

Si la classe qu'on créé fait de l'allocation dynamique dans le tas, il est de bon ton de s'assurer que cette classe dispose de :
- Un constructeur par copie
- Opérateur d'affectation
- Un destructeur

De plus, pour toutes les classes :
- Un constructeur vide, qui initialise directement à des bonnes valeurs.

*** Déclaration d'amitié

Toute fonction peut être déclarée amie d'une ou plusieurs classes.

Une fonction amie peut accéder directement aux éléments privés de la classe, sans passer par une méthode.


* Cours 3 : 30/09/2019

** Template

#+BEGIN_SRC c++
  template <typename T>
  T sum (T a, T b)
  {
	  return a + b;
  }
#+END_SRC

(classname fonctionne aussi)

Le compilateur va générer une fonction qui correspond au type.

Directement dans les fichiers d'en-tête.

On peut forcer une promotion de type :

#+BEGIN_SRC c++
  sum<string>('a', 'b');
#+END_SRC

On peut faire la même chose avec des classes

#+BEGIN_SRC c++
  template <typename T>
  class mypair {
	  T values[2];
  public:
	  mypair(T first, T second) {
		  values[0] = first;
		  values[1] = second;
	  }
  };
#+END_SRC

auto mot-clé introduit en C++11, permet au compilateur d'inférer le type de données.

#+BEGIN_SRC c++
  auto d = 5.0;
  auto i = 1 + 2;
#+END_SRC

On peut mettre auto en retour de fonction à partir de C++14

Existe en copie (auto) et en référence (auto &)

Pratique mais casse-gueule.

** La bibliothèque standard

*** La lib standard C

Apparemment, la bibliothèque standard de C est "vide".

Inclut la lib standard du C.

Pour se servir d'une bibliothèque C :

#+BEGIN_SRC c++
  extern "C" {

	  // Déclaration des fonctions et en-têtes C

  }
#+END_SRC

*** La lib standard C++

- iosfwd : en-têtes
- flux I/O standard
- flux fichiers (lecture écriture simultanée) : Descripteur de fichier, mais par flux.
- sstream (tampons mémoire).

Le flux vient de l'idée qu'on ne veut pas surallouer. Dans une opération complexe, on préfère faire les opérations simples successives sur un même objet dynamique, le flux.

*** Utility

Les opérateurs relatifs sont définis ici.

Le == entre les strings en C++ compare les noms (en C, il compare les pointeurs).
Le + entre une string et un entier se comprend comme de l'arithmétique des pointeurs : on se décale dans la string.

*** Les REGEX

Dans le cas des données simples, peut permettre de se passer d'une grammaire et d'un parser.
Peut manipuler les strings comme sed ou awk aurait permis de le faire.

** Les conteneurs

Il en existe un certain nombre dans la lib standard

*** Vector
Stockage contigu en mémoire. Accès à n'importe quel élément en temps constant.

Stockage compact, pas de surcoût mémoire.
C'est la manière canonique de faire de l'allocation dynamique (plus que new ou malloc).

Bonne continuité spatiale, se cache bien.

Insertion en milieu de vecteur : O(n)

*** List
Liste doublement chaînée.
Insertion en milieu de liste O(1) : d'autres
Pas cachable : mauvaise continuité

*** dequeue
Pareil que le vecteur, mais queue à deux fins : les opérations en queue et en tête sont très peu chères (par rapport au vecteur, pour qui les opérations en tête sont coûteuses)

*** set
Arbre binaire (R/N)
Très bon pour la recherche : log(n)
Efficace pour l'insertion : log(n)

*** Points communs

T le type des éléments
allocateur
Comparaison, hachage

begin et end : itérateurs pratiques (end est past the end)

Mais c'est tout.

Tous les itérateurs ne se valent pas. Selon le conteneur, plus ou moins d'opérateurs sont supportés.

[[./CM3/iterateurs.jpg][Tableau des itérateurs]]

*** Les conteneurs associatifs

*** Hachage

Il y a toujours des collisions.

On obtient une valeur difficilement réversible.

On fait % le nombre d'éléments du bucket : endroit où je vais chercher dans ma table.

Comparaison d'égalité.


La seule manière d'être dans un mauvais jour, c'est la collision (plutôt la modulo-collision) : on chaîne les structures de dépassement à la première en mode liste chaînée.

Une bonne fonction de hachage est uniforme, on remplit bien les buckets.
Une mauvaise fonction de hachage met tous les éléments dans le même bucket, qui devient une très longue liste chaînée.

On aime aussi bien les fonctions de hachage qui mettent loin les entrées proches les unes des autres.

*** Memory

Ensemble de pointeurs intelligents, capables de désallouer la mémoire dès qu'un compteur de références tombe à 0 (version unique et partagée).


* Cours 4 : 07/10/2019

** Les conteneurs, suites

*** algorithms

Un ensemble de fonctions utiles présents sur la plupart des conteneurs.

Se séparent entre les algorithmes sans modification, et les algorithmes avec modification.

Plusieurs genres de fonction de recherche :
- Rendent un itérateur sur le résultat.

remove va juste shift les trucs enlevés à la fin, et changer la valeur de l'itérateur end sur la première des valeurs supprimées (soit juste après la fin des )
erase va effectivement supprimer les cases.

Remove rend un itérateur vers le premier élément qu'on a foutu à la fin, si on la met dans une variable auto on peut ensuite erase à partir de la variable.

*** Aparté sur les pointeurs de fonction, foncteurs et lambdas

En C

#+BEGIN_SRC c
  int foo(int x)
  {
	  return x;
  }

  int main()
  {
	  int (*fcnPtr) (int) = foo; // pointeur d'un fonction qui prend int et qui rend int
		  (*fcnPtr)(5);
	  fcnPtr(5);
	  return 0;
  }

#+END_SRC

Notion de foncteur étend le pointeur de fonction.
[Reprendre]

Sinon, pointeur sur des fonctions anonymes (lambda)

[] (paramètres) -> type_retour {corps} peut remplacer un pointeur de fonction.
[=variable_contexte], [=] par copie tout, [&] par référence tout : permet de capturer des variables du contexte local pour les donner à lambda.

#+BEGIN_QUOTE
Pointeur du tableau nu est homogène à un itérateur.
#+END_QUOTE

** Programmation concurrente

On n'arrive pas à dépasser 5GHz.

L'augmentation des transistors passe par l'augmentation du nombre de coeurs.

Il faut gérer la concurrence.

*** Problèmes

L'exécution n'est plus séquentielle.
Enormément d'actions ne sont pas liées logiquement et chronologiquement les unes entre les autres.

Plein d'exécutions possibles du programme.

K étapes, N threads \to K^N entrelacements.

On doit correctement introduire un certain nombre de synchronisations, pour exprimer explicitement les précédences entre les fils.

On réduit le champ des exécutions légitimes du programme, de manière à s'assurer de ce qu'on veut.

*** Loi d'Amdahl

Chaque algorithmes dispose d'une partie séquentielle (pas accélérable) et une partie parallélisable (accélérable de manière proportionnelle en )

On plafonne à partir du moment où n le nombres de processeurs dépasse les opérations après découpage.

*** Problèmes, suite

**** Ressources critiques, non-atomicité, conditions de course

Ressources aux accès concurrents : ressources critiques.
Pas d'atomicité des instructions du C++ (et même pas en C non plus). 1 ligne de C++ produit N instructions assembleur impossibles à compter.
C est un peu meilleur, on a presque une correspondance 1 pour 1.
Data Race Condition : Celui qui a écrit en dernier a raison sur la valeur de la variable.

**** Interblocages

Chacun demande une ressource pas dans le même ordre, si on manque de chance, on peut bloquer tous les fils.
Problème des philosophes, Edgar Dijkstra (1955).

**** Non-déterminisme

Explosion de l'espace d'état : on a plein d'exécutions possibles.
On ne fait aucune hypothèse sur l'ordonnanceur, il fait ce qu'il veut, on ne le contrôle pas.

On doit penser à l'ordonnanceur comme mon ennemi (c'est le Malin Génie), pour s'assurer de ce que l'exécution se passe comme on veut.

Difficulté de reproduire les problèmes.

La distribution de probabilité est en effet défavorable aux fautes de concurrence.
La commutation doit se passer au pire moment pour que la faute se produise : très peu probable sur un nombre fini d'exécutions.
Mais avec un nombre d'exécutions qui augmente, la proba tend vers 1.

** Les fils d'exécution du C++11

POSIX intègre les fils d'exécution dans la bibliothèque standard de C : spécifique aux machines POSIX.
C++11 l'intègre directement dans le langage.

Les fils d'exécution n'ont aucune protection sur leur pile par rapport aux autres fils d'exécution du même processus lourd : *espace d'adressage commun !!!!*

Chaque thread soit avoir  :
- Un mini-PCB (avec son pointeur de pile et son PC)
- une pile
- Tous ses attributs utilisés par l'ordonnanceur
- Traitement des signaux

En gros tout ce qui implique les interactions avec le noyau en tant que processus indépendant.

#+BEGIN_THEOREM
Les printf peuvent masquer les erreurs : printf est une E/S, elle force l'ordonnancement, on réduit l'espace d'état.
#+END_THEOREM

*** std::thread

A l'instanciation, on lui passe un pointeur de fonction, puis les arguments de la fonction.

L'objet thread se termine quand il sort de la fonction : il est en état "zombie" (pas vraiment, mais c'est l'idée). Un join permet de récupérer son état.

#+BEGIN_SRC c++
  #include <iostream>
  #include <thread>

  void foo()
  {
	  // Faire des trucs
  }

  int main()
  {
	  // Créer un thread avec foo un pointeur de fonction
	  std::thread first (foo);

	  // On peut faire d'autres trucs ici

	  first.join(); // On attend first.

	  std::cout << "foo completed" << std::endl;
	  return 0;
  }

#+END_SRC

Passage de paramètres :

Passage de références pose problème : autant une variable par copie est toujours valable dans une fonction (elles sont copiées localement, elles vivent dans la pile de la fonction), autant une référence (soit un pointeur déjà déréférencé) peut bien mourir (arrêter d'être légitime) à n'importe quelle moment de la vie du thread, sans que ce soit controllable par lui.

C'est au programmeur de garantir sa vie.

Elle est passée avec std::ref (référence) ou std::cref (pointeur).

Pas de valeur de retour de la fonction passée au thread : il faut modifier des données partagées (attention à la synchronisation).

#+BEGIN_SRC c++
  void f1(int n, bool b);
  void f2(int& n);

  int main()
  {
	  int value = 0;
	  std::thread t1(f1, value + 1, true);
	  std::thread t2(f2, std::ref(value));

	  // Faire des trucs
	  t1.join();
	  t2.join();
	  return 0;
  }
#+END_SRC

**** yield

Demande explicite (pas contraignante) de commutation.
Laisse l'occasion aux autres threads de prendre la main.
Dépend des plateformes (évident : implique l'ordonnanceur)

**** sleep_for et sleep_until

Endormir le thread qui appelle.
Variante sleep_until.

La durée du sleep n'est pas garantie : au moins la durée demandée, mais en fait plus.

Vivent dans le namespace this_thread

**** thread détaché

Détacher un thread permet de ne pas mettre de join, ils se termineront avec le main. (On ne doit pas avoir bien besoin de lui, si ce qu'il fait n'a pas besoin d'être join). Cas typique : statistiques d'arrière-plan.

*** std::atomic

atomic_boolean_flag

[Ajouter slides Carlinet]

Garantit l'atomicité de seulement un certain nombre d'opérations (seules les opérations bit par bit).



* Annexes

Les supports de cours :

[[./CM1/cours1.pdf][Cours 1]]
[[./CM2/cours2.pdf][Cours 2]]
[[./CM3/cours3.pdf][Cours 3]]
[[./CM4/cours4.pdf][Cours 4]]


